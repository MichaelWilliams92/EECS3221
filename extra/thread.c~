/*
 * Family name: Williams 
 * Given Name: Michael 
 * Student Number: 211087798
 * EECS Login: mw1992 
 *
 *The process program is code for computing the maximum, minimum, largest sum and largest difference
 *of individual data sets, as well as the maximum and minimum value of all the data set values combined.  
 *
 * thread.c basically repeats the functions of process.c, only now
 * performing calculations with multiple threads. Each thread processes a
 * data set and performs the calculations needed before sending the
 * results to the main program. Once all threads are finished, the final
 * results are printed 
 */

#include <stdlib.h>
#include <pthread.h>
#include <stdio.h>
#include <sys/types.h>
#include <math.h>

// array structure
typedef struct {
    FILE           *file;

    float           main_sum;
    float           main_difference;
    float           main_minimum;
    float           main_maximum;
           

} array;

// global variables
static int arrayIndex = 0;

pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
array *Result;

// the thread process.  This function is called when a thread is created.
void *thread_process(void *name){

    // thread process variables
    float           thread_sum;
    float           thread_difference;
    float           thread_minimum = +INFINITY;
    float           thread_maximum = -INFINITY;
    float           temp;

    FILE           *file_reader = fopen(name, "r");

    // check that file exists
    if (name == NULL) {
	printf("File does not exists\n");
	exit(-1);
    }
    // read from file and set minimum and maximum value
    while (fscanf(file_reader, "%f", &temp) != EOF) {

	if (temp < thread_minimum) {
	    thread_minimum = temp;
	}

	if (temp > thread_maximum) {
	    thread_maximum = temp;
	}

    }// while loop setting min and max

    thread_sum = thread_minimum + thread_maximum;
    thread_difference = thread_minimum - thread_maximum;

    // lock critical information
    pthread_mutex_lock(&lock);

    Result[arrayIndex].main_sum = thread_sum;
    Result[arrayIndex].main_difference = thread_difference;
    Result[arrayIndex].main_minimum = thread_minimum;
    Result[arrayIndex].main_maximum = thread_maximum;
    Result[arrayIndex].file = name;

    arrayIndex++;

    // unlock critical information
    pthread_mutex_unlock(&lock);

    // close file and exit thread
    fclose(file_reader);
    pthread_exit(0);

}// thread_process method

int main(int argc, char *argv[]){

    int count;

    // check number of args
    if (argc < 2) {
	printf
	    ("No file names provided.\nPlease enter file names.\n Error message %d", stderr);
	return -1;
    }
    
    if (atoi(argv[1]) < 0) {
	printf("%d must be >= 0\n", atoi(argv[1]));
	return -1;
    }

    // creating a thread ID and attribute
    pthread_t       t_id[argc];
    pthread_attr_t  t_attribute;

    // allocating memory for structure
    Result = (array *) malloc(sizeof(array) * argc);

    // creating the threads and sending them to run the thread_process method
    for (count = 1; count < argc; count++) {

	char           *data_set = argv[count];
	pthread_attr_init(&t_attribute);
	pthread_create(&t_id[count - 1], &t_attribute, thread_process,
		       data_set);

    }// for loop

    // join threads
    for (count = 1; count < argc; count++) {

	pthread_join(t_id[count - 1], NULL);

    }//join threads loop

    // create global max and min
    float           global_maximum = -INFINITY;
    float           global_minimum = +INFINITY;

    for (count = 1; count < argc; count++) {

	// finding global_maximum and global_minimum values
	if (Result[count - 1].main_minimum < global_minimum) {
	    global_minimum = Result[count - 1].main_minimum;
	}

	if (Result[count - 1].main_maximum > global_maximum) {
	    global_maximum = Result[count - 1].main_maximum;
	}

	printf("%s SUM=%0.5f DIF=%0.5f MIN=%0.5f MAX=%0.5f\n", Result[count - 1].file,
	       Result[count - 1].main_sum,
	       Result[count - 1].main_difference,
	       Result[count - 1].main_minimum,
	       Result[count - 1].main_maximum);
    }// for loop for finding and printing global min and max

    printf("MINIMUM=%0.5f MAXIMUM=%0.5f\n", global_minimum, global_maximum);
    return 0;
}// main method

